
name: CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  ################### Build and test the application ###################
  Build_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run:  nohup python app.py & 
      
    - name: Run curl command
      run: curl http://localhost:5000

    - name: Cleanup Python process
      if: always()
      run: |
        # Kill by PID if file exists
        if [ -f .pid ]; then
          kill $(cat .pid) || true
        fi
        # Double check port is cleared
        lsof -ti:5000 | xargs -r kill -9 || true
      
################### E2E Test ###################
  # E2E_test:
  #   needs: Build_test
  #   runs-on: ubuntu-latest
  #   steps:
    - uses: actions/checkout@v4
    - name: give execute permission to the script
      run: chmod +x ./secret.sh

    - name: Fetch secret from AWS Secrets Manager
      id: secrets
      run: ./secret.sh

    - name: Build and run with Docker Compose
      env:
        MYSQL_ROOT_PASSWORD: $DB_PASSWORD
        MYSQL_DATABASE: $DB_NAME
      run: docker compose up -d
      
    - name: Wait for service
      run: sleep 10
      
    - name: Test API
      run: curl http://localhost:80

  ################### Push the artifact to AWS ECR registry ###################
  
  push_to_ecr:
    needs: Build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build and push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dev/entrytracker
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG