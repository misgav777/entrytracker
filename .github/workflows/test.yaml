
name: CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  ################### Build and test the application ###################
  Build_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run:  nohup python app.py & 
      
    - name: Run curl command
      run: curl http://localhost:5000

    # - name: Cleanup Python process
    #   if: always()
    #   run: |
    #     # Kill by PID if file exists
    #     if [ -f .pid ]; then
    #       kill $(cat .pid) || true
    #     fi
    #     # Double check port is cleared
    #     lsof -ti:5000 | xargs -r kill -9 || true
      
################### E2E Test ###################
  E2E_test:
    needs: Build_test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build and run with Docker Compose
      run: docker compose up -d
      
    - name: Wait for service
      run: sleep 10
      
    - name: Test API
      run: curl http://localhost:80

################### Push the artifact to AWS ECR registry ###################
  push_to_ecr:
    needs: E2E_test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Download version artifact
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: version-file
        path: .
    
    - name: Create initial version if not exists
      run: |
        if [ ! -f version.txt ]; then
          echo "1.0.0" > version.txt
        fi

    - name: Get and increment version
      id: version
      run: |
        VERSION=$(cat version.txt)
        MAJOR=$(echo $VERSION | cut -d. -f1)
        MINOR=$(echo $VERSION | cut -d. -f2)
        PATCH=$(echo $VERSION | cut -d. -f3)
        PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo $NEW_VERSION > version.txt
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1  

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: dev/entrytracker
        IMAGE_TAG: ${{ steps.version.outputs.new_version }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    - name: Upload version artifact
      uses: actions/upload-artifact@v4
      with:
        name: version-file
        path: version.txt
        retention-days: 90